Bug:
MOM is returning 0, which is caused as a result of there not being a smallest clause?
The knowledge base after unit resolution has '{} in it, meaning a contradiction, but this shouldn't happen.
It should be caught earlier I think.
Also, appending was silly for recursive case, had multiple variables in result. BUT THIS SHOULDN'T HAPPEN EITHER.
Found problem:

> (condition '((1 2 3) (2 3) ()) 1)
((1 2 3) (2 3) ())
((2 3) ())
(())
- : (Listof (Listof Integer))
'((2 3) ())

Here, condition should return '{{}}', not what it does.

Maybe fixed by adding a check for the next call to condition, making sure that it isn't a contradiction.

In the old func, if there was a contradiction at the end, it still got added to the result instead of overriding the return.

(define (condition [kb : (Listof (Listof Integer))] [l : Integer]) : (Listof (Listof Integer))
  (match kb
    ['{} '{}]
    ['{{}} '{{}}]
    [(cons f r)
     (match (condition-help f l)
       [#t (condition r l)] ; clause = #t, remove clause from kb
       ['{} '{{}}] ; empty clause, contradiction
       [(list p ...)
       ; NEW !!
        (let ([rest (condition r l)])
          (if (equal? rest '{{}}) ; check if the next call contains a contradiction
              '{{}}
              (cons (apply list p) rest)))])]))
